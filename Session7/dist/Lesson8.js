"use strict";
class Account {
    constructor(accountNumber, initialBalance = 0) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
        this.history = [];
        this.status = "active";
    }
    deposit(amount) {
        if (this.status !== "active") {
            console.log("‚ùå T√†i kho·∫£n ƒëang b·ªã kh√≥a, kh√¥ng th·ªÉ n·∫°p ti·ªÅn.");
            return;
        }
        if (amount <= 0) {
            console.log("‚ùå S·ªë ti·ªÅn n·∫°p ph·∫£i l·ªõn h∆°n 0.");
            return;
        }
        this.balance += amount;
        this.history.push(`N·∫°p: +${amount} | S·ªë d∆∞: ${this.balance}`);
        console.log(`‚úÖ N·∫°p ${amount} th√†nh c√¥ng. S·ªë d∆∞ hi·ªán t·∫°i: ${this.balance}`);
    }
    withdraw(amount) {
        if (this.status !== "active") {
            console.log("‚ùå T√†i kho·∫£n ƒëang b·ªã kh√≥a, kh√¥ng th·ªÉ r√∫t ti·ªÅn.");
            return;
        }
        if (amount <= 0) {
            console.log("‚ùå S·ªë ti·ªÅn r√∫t ph·∫£i l·ªõn h∆°n 0.");
            return;
        }
        if (amount > this.balance) {
            console.log("‚ùå Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ r√∫t.");
            return;
        }
        this.balance -= amount;
        this.history.push(`R√∫t: -${amount} | S·ªë d∆∞: ${this.balance}`);
        console.log(`‚úÖ R√∫t ${amount} th√†nh c√¥ng. S·ªë d∆∞ hi·ªán t·∫°i: ${this.balance}`);
    }
    showHistory() {
        console.log(`üìú L·ªãch s·ª≠ giao d·ªãch c·ªßa t√†i kho·∫£n ${this.accountNumber}:`);
        this.history.forEach(item => console.log(item));
    }
}
class CheckingAccount extends Account {
    constructor(accountNumber, initialBalance, overdraftLimit) {
        super(accountNumber, initialBalance);
        this.overdraftLimit = overdraftLimit;
    }
    // Ghi ƒë√® ph∆∞∆°ng th·ª©c withdraw
    withdraw(amount) {
        if (this.status !== "active") {
            console.log("‚ùå T√†i kho·∫£n ƒëang b·ªã kh√≥a, kh√¥ng th·ªÉ r√∫t ti·ªÅn.");
            return;
        }
        if (amount <= 0) {
            console.log("‚ùå S·ªë ti·ªÅn r√∫t ph·∫£i l·ªõn h∆°n 0.");
            return;
        }
        // Cho ph√©p r√∫t ƒë·∫øn h·∫°n m·ª©c √¢m = overdraftLimit
        if (this.balance - amount < -this.overdraftLimit) {
            console.log(`‚ùå Kh√¥ng th·ªÉ r√∫t qu√° h·∫°n m·ª©c th·∫•u chi: ${this.overdraftLimit}`);
            return;
        }
        this.balance -= amount;
        this.history.push(`R√∫t (Checking): -${amount} | S·ªë d∆∞: ${this.balance}`);
        console.log(`‚úÖ R√∫t ${amount} th√†nh c√¥ng (Checking). S·ªë d∆∞ hi·ªán t·∫°i: ${this.balance}`);
    }
}
// --- Test ---
const checkAcc = new CheckingAccount("987654321", 2000, 1000);
checkAcc.deposit(500); // N·∫°p 500
checkAcc.withdraw(2200); // R√∫t v∆∞·ª£t qu√° s·ªë d∆∞ nh∆∞ng trong h·∫°n m·ª©c
checkAcc.withdraw(500); // V∆∞·ª£t qu√° h·∫°n m·ª©c => Kh√¥ng cho ph√©p
checkAcc.deposit(1000); // N·∫°p ti·ªÅn
checkAcc.showHistory();
